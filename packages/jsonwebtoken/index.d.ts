/* auto-generated by NAPI-RS */
/* eslint-disable */
export const enum Algorithm {
  /** HMAC using SHA-256 */
  HS256 = 'HS256',
  /** HMAC using SHA-384 */
  HS384 = 'HS384',
  /** HMAC using SHA-512 */
  HS512 = 'HS512',
  /** ECDSA using SHA-256 */
  ES256 = 'ES256',
  /** ECDSA using SHA-384 */
  ES384 = 'ES384',
  /** RSASSA-PKCS1-v1_5 using SHA-256 */
  RS256 = 'RS256',
  /** RSASSA-PKCS1-v1_5 using SHA-384 */
  RS384 = 'RS384',
  /** RSASSA-PKCS1-v1_5 using SHA-512 */
  RS512 = 'RS512',
  /** RSASSA-PSS using SHA-256 */
  PS256 = 'PS256',
  /** RSASSA-PSS using SHA-384 */
  PS384 = 'PS384',
  /** RSASSA-PSS using SHA-512 */
  PS512 = 'PS512',
  /** Edwards-curve Digital Signature Algorithm (EdDSA) */
  EdDSA = 'EdDSA'
}

export declare function decodeHeader(token: string): Header

export interface Header {
  /**
   * The algorithm used
   *
   * Defined in [RFC7515#4.1.1](https://tools.ietf.org/html/rfc7515#section-4.1.1).
   * Default to `HS256`
   */
  algorithm?: Algorithm
  /**
   * Content type
   *
   * Defined in [RFC7519#5.2](https://tools.ietf.org/html/rfc7519#section-5.2).
   */
  contentType?: string
  /**
   * JSON Key URL
   *
   * Defined in [RFC7515#4.1.2](https://tools.ietf.org/html/rfc7515#section-4.1.2).
   */
  jsonKeyUrl?: string
  /**
   * JSON Web Key
   *
   * Defined in [RFC7515#4.1.3](https://tools.ietf.org/html/rfc7515#section-4.1.3).
   * Key ID
   *
   * Defined in [RFC7515#4.1.4](https://tools.ietf.org/html/rfc7515#section-4.1.4).
   */
  keyId?: string
  /**
   * X.509 URL
   *
   * Defined in [RFC7515#4.1.5](https://tools.ietf.org/html/rfc7515#section-4.1.5).
   */
  x5Url?: string
  /**
   * X.509 certificate chain. A Vec of base64 encoded ASN.1 DER certificates.
   *
   * Defined in [RFC7515#4.1.6](https://tools.ietf.org/html/rfc7515#section-4.1.6).
   */
  x5CertChain?: Array<string>
  /**
   * X.509 SHA1 certificate thumbprint
   *
   * Defined in [RFC7515#4.1.7](https://tools.ietf.org/html/rfc7515#section-4.1.7).
   */
  x5CertThumbprint?: string
  /**
   * X.509 SHA256 certificate thumbprint
   *
   * Defined in [RFC7515#4.1.8](https://tools.ietf.org/html/rfc7515#section-4.1.8).
   *
   * This will be serialized/deserialized as "x5t#S256", as defined by the RFC.
   */
  x5TS256CertThumbprint?: string
}

export declare function sign(claims: { [key: string]: any }, key: string | Uint8Array, header?: Header | undefined | null, abortSignal?: AbortSignal | undefined | null): Promise<string>

export declare function signSync(claims: { [key: string]: any }, key: string | Uint8Array, header?: Header | undefined | null): string

export interface Validation {
  /**
   * If it contains a value, the validation will check that the `aud` field is a member of the
   * audience provided and will error otherwise.
   *
   * Defaults to an empty collection.
   */
  aud?: Array<string>
  /**
   * Which claims are required to be present before starting the validation.
   * This does not interact with the various `validate_*`. If you remove `exp` from that list, you still need
   * to set `validate_exp` to `false`.
   * The only value that will be used are "exp", "nbf", "aud", "iss", "sub". Anything else will be ignored.
   *
   * Defaults to `exp`.
   */
  requiredSpecClaims?: Array<string>
  /**
   * Add some leeway (in seconds) to the `exp` and `nbf` validation to
   * account for clock skew.
   *
   * Defaults to `60`.
   */
  leeway?: number
  /**
   * Whether to validate the `exp` field.
   *
   * Defaults to `true`.
   */
  validateExp?: boolean
  /**
   * Whether to validate the `nbf` field.
   *
   * It will return an error if the current timestamp is before the time in the `nbf` field.
   *
   * Defaults to `false`.
   */
  validateNbf?: boolean
  /**
   * If it contains a value, the validation will check that the `sub` field is the same as the
   * one provided and will error otherwise.
   *
   * Turned off by default.
   */
  sub?: string
  /**
   * The algorithm used to verify the signature.
   *
   * Defaults to `HS256`.
   */
  algorithms?: Array<Algorithm>
  /**
   * If it contains a value, the validation will check that the `iss` field is a member of the
   * iss provided and will error otherwise.
   * Use `set_issuer` to set it
   *
   * Defaults to an empty collection.
   */
  iss?: Array<string>
  /**
   * Whether to validate the JWT signature.
   *
   * Defaults to `true`.
   */
  validateSignature?: boolean
}

export declare function verify(token: string, key: string | Uint8Array, validation?: Validation | undefined | null, abortSignal?: AbortSignal | undefined | null): Promise<{ [key: string]: any }>

export declare function verifySync(token: string, key: string | Uint8Array, validation?: Validation | undefined | null): { [key: string]: any }

